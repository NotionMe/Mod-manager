import 'dart:io';
import 'package:path/path.dart' as path;
import '../models/character_info.dart';
import 'config_service.dart';

/// –ì–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ symbolic links
class ModManagerService {
  final ConfigService _configService;

  ModManagerService(this._configService);

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –º–æ–¥–∞–º–∏ (SaveMods)
  String? get modsPath => _configService.modsPath;

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∫—É–¥–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ links (Mods)
  String? get saveModsPath => _configService.saveModsPath;

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —à–ª—è—Ö–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —ñ –≤–∞–ª—ñ–¥–Ω—ñ
  Future<(bool, String)> validatePaths() async {
    final mods = modsPath;
    final saveMods = saveModsPath;

    if (mods == null || mods.isEmpty || saveMods == null || saveMods.isEmpty) {
      return (
        false,
        '–®–ª—è—Ö–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —ó—Ö —É –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.',
      );
    }

    final modsDir = Directory(mods);
    if (!await modsDir.exists()) {
      return (false, '–ü–∞–ø–∫–∞ –∑ –º–æ–¥–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î: $mods');
    }

    final saveModsDir = Directory(saveMods);
    // –ü–∞–ø–∫–∞ –¥–ª—è links –º–æ–∂–µ –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ - —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    if (await saveModsDir.exists()) {
      final stat = await saveModsDir.stat();
      if (stat.type != FileSystemEntityType.directory) {
        return (false, '–®–ª—è—Ö –¥–ª—è links —ñ—Å–Ω—É—î –∞–ª–µ –Ω–µ —î –ø–∞–ø–∫–æ—é: $saveMods');
      }
    }

    return (true, '');
  }

  /// –°–∫–∞–Ω—É—î –ø–∞–ø–∫—É –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –º–æ–¥–∞–º–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥—ñ–≤
  Future<List<String>> scanMods() async {
    try {
      final (valid, error) = await validatePaths();
      if (!valid) {
        print('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —à–ª—è—Ö–∏: $error');
        return [];
      }

      final modsDir = Directory(modsPath!);
      if (!await modsDir.exists()) {
        print('–ü–∞–ø–∫–∞ –∑ –º–æ–¥–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î: $modsPath');
        return [];
      }

      final mods = <String>[];
      await for (final entity in modsDir.list()) {
        if (entity is Directory) {
          // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ/–ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–∞–ø–∫–∏
          final name = path.basename(entity.path);
          if (!name.startsWith('.') && !name.startsWith('__')) {
            mods.add(name);
          }
        }
      }

      print('–ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—ñ–≤: ${mods.length}');
      return mods;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥—ñ–≤: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –º–æ–¥–∏
  Future<List<ModInfo>> getModsInfo() async {
    try {
      final modNames = await scanMods();
      final modsInfo = <ModInfo>[];

      for (final modName in modNames) {
        final isActive = await isModActive(modName);
        final imagePath = await _findModImage(modName);

        modsInfo.add(
          ModInfo(
            id: modName,
            name: modName,
            characterId: 'unknown',
            isActive: isActive,
            imagePath: imagePath,
          ),
        );
      }

      return modsInfo;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–æ–¥–∏: $e');
      return [];
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π (—á–∏ —ñ—Å–Ω—É—î symlink)
  Future<bool> isModActive(String modName) async {
    try {
      if (saveModsPath == null) return false;

      final linkPath = path.join(saveModsPath!, modName);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –∑–∞ —Ü–∏–º —à–ª—è—Ö–æ–º
      final exists =
          await FileSystemEntity.type(linkPath) !=
          FileSystemEntityType.notFound;
      if (!exists) return false;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å–∞–º–µ symlink
      final isLink = await FileSystemEntity.isLink(linkPath);
      return isLink;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–æ–¥—É: $e');
      return false;
    }
  }

  /// –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–æ–¥ (—Å—Ç–≤–æ—Ä–∏—Ç–∏ symbolic link)
  Future<bool> activateMod(String modName) async {
    try {
      final (valid, error) = await validatePaths();
      if (!valid) {
        print('–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —à–ª—è—Ö—ñ–≤: $error');
        return false;
      }

      final srcPath = path.join(modsPath!, modName);
      final dstPath = path.join(saveModsPath!, modName);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∂–µ—Ä–µ–ª–æ —ñ—Å–Ω—É—î
      final srcDir = Directory(srcPath);
      if (!await srcDir.exists()) {
        print('–ü–∞–ø–∫–∞ –º–æ–¥—É –Ω–µ —ñ—Å–Ω—É—î: $srcPath');
        return false;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É SaveMods —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
      final saveModsDir = Directory(saveModsPath!);
      if (!await saveModsDir.exists()) {
        await saveModsDir.create(recursive: true);
      }

      // –í–∏–¥–∞–ª—è—î–º–æ —è–∫—â–æ –≤–∂–µ —ñ—Å–Ω—É—î —â–æ—Å—å –∑–∞ —Ü–∏–º —à–ª—è—Ö–æ–º
      final dst = Link(dstPath);
      if (await dst.exists() || await FileSystemEntity.isLink(dstPath)) {
        await _safeRemove(dstPath);
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ symlink
      await Link(dstPath).create(srcPath, recursive: false);
      print('–°—Ç–≤–æ—Ä–µ–Ω–æ symlink: $dstPath -> $srcPath');

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      await _configService.addActiveMod(modName);

      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –º–æ–¥—É: $e');
      return false;
    }
  }

  /// –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–æ–¥ (–≤–∏–¥–∞–ª–∏—Ç–∏ symbolic link)
  Future<bool> deactivateMod(String modName) async {
    try {
      if (saveModsPath == null) {
        print('‚ùå –®–ª—è—Ö SaveMods –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
        return false;
      }

      final linkPath = path.join(saveModsPath!, modName);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î
      final exists =
          await FileSystemEntity.type(linkPath) !=
          FileSystemEntityType.notFound;
      print('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è: $linkPath - exists: $exists');

      if (!exists) {
        print('‚ö†Ô∏è –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: $linkPath');
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ symlink
      final isLink = await FileSystemEntity.isLink(linkPath);
      print('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É: isLink: $isLink');

      if (!isLink) {
        print('‚ùå –¶–µ –Ω–µ symlink: $linkPath');
        return false;
      }

      // –í–∏–¥–∞–ª—è—î–º–æ symlink
      final link = Link(linkPath);
      await link.delete();
      print('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ symlink: $linkPath');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–¥–∞–ª–µ–Ω–æ
      final stillExists =
          await FileSystemEntity.type(linkPath) !=
          FileSystemEntityType.notFound;
      print('üîç –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è - stillExists: $stillExists');

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      await _configService.removeActiveMod(modName);

      return true;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –º–æ–¥—É: $e');
      return false;
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ —Å—Ç–∞–Ω –º–æ–¥—É (–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏)
  Future<bool> toggleMod(String modName) async {
    final isActive = await isModActive(modName);
    print(
      'üîÑ Toggle –º–æ–¥: $modName, –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: ${isActive ? "–∞–∫—Ç–∏–≤–Ω–∏–π" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π"}',
    );

    if (isActive) {
      print('‚û°Ô∏è –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è...');
      final result = await deactivateMod(modName);
      print('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: $result');
      return result;
    } else {
      print('‚û°Ô∏è –ê–∫—Ç–∏–≤–∞—Ü—ñ—è...');
      final result = await activateMod(modName);
      print('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: $result');
      return result;
    }
  }

  /// –ó–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–¥—É
  Future<String?> _findModImage(String modName) async {
    try {
      final modPath = path.join(modsPath!, modName);
      final modDir = Directory(modPath);

      if (!await modDir.exists()) return null;

      // –®—É–∫–∞—î–º–æ Preview.png –∞–±–æ —ñ–Ω—à—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      final imageNames = [
        'Preview.png',
        'preview.png',
        'thumbnail.png',
        'icon.png',
      ];

      for (final imageName in imageNames) {
        final imagePath = path.join(modPath, imageName);
        final imageFile = File(imagePath);
        if (await imageFile.exists()) {
          return imagePath;
        }
      }

      return null;
    } catch (e) {
      return null;
    }
  }

  /// –ë–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª/symlink
  Future<void> _safeRemove(String filePath) async {
    try {
      final entity = await FileSystemEntity.type(filePath);

      if (entity == FileSystemEntityType.link) {
        await Link(filePath).delete();
      } else if (entity == FileSystemEntityType.directory) {
        await Directory(filePath).delete(recursive: true);
      } else if (entity == FileSystemEntityType.file) {
        await File(filePath).delete();
      }
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: $e');
    }
  }
}
