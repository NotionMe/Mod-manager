#!/usr/bin/env python3
"""
–†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ F10 –Ω–∞ Linux
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—ñ–≤ —É 3DMigoto
"""

import sys
import subprocess
import time
import os
from pathlib import Path

def check_command_exists(command):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ"""
    try:
        subprocess.run(['which', command], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
        return True
    except subprocess.CalledProcessError:
        return False

def send_f10_xdotool():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î F10 —á–µ—Ä–µ–∑ xdotool (X11)"""
    if not check_command_exists('xdotool'):
        print("‚ùå xdotool –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
        return False
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤—ñ–∫–Ω–æ –≥—Ä–∏
        window_names = ['Zenless', 'ZZZ', 'zenless']
        window_id = None
        
        for name in window_names:
            try:
                result = subprocess.run(['xdotool', 'search', '--name', '--onlyvisible', name], 
                                      capture_output=True, text=True, check=True)
                if result.stdout.strip():
                    window_id = result.stdout.strip().split('\n')[0]
                    print(f"‚úì –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–∫–Ω–æ –≥—Ä–∏: {name} (ID: {window_id})")
                    break
            except subprocess.CalledProcessError:
                continue
        
        if window_id:
            # –ê–∫—Ç–∏–≤—É—î–º–æ –≤—ñ–∫–Ω–æ –≥—Ä–∏
            subprocess.run(['xdotool', 'windowactivate', window_id], check=True)
            time.sleep(0.2)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ F10 –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            subprocess.run(['xdotool', 'key', '--window', window_id, 'F10'], check=True)
        else:
            # –Ø–∫—â–æ –≤—ñ–∫–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            subprocess.run(['xdotool', 'key', 'F10'], check=True)
        
        print("‚úì F10 –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ xdotool")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ xdotool: {e}")
        return False

def send_f10_ydotool():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î F10 —á–µ—Ä–µ–∑ ydotool (Wayland)"""
    if not check_command_exists('ydotool'):
        print("‚ùå ydotool –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
        return False
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ –≥—Ä–∏
        focus_game_window()
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è
        time.sleep(0.2)
        
        # F10 key code –¥–ª—è ydotool - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        for i in range(2):
            subprocess.run(['ydotool', 'key', '67:1', '67:0'], check=True)
            if i < 1:
                time.sleep(0.1)
        
        print("‚úì F10 –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ydotool")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ydotool: {e}")
        return False

def focus_game_window():
    """–ù–∞–º–∞–≥–∞—î—Ç—å—Å—è —Å—Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏—Å—è –Ω–∞ –≤—ñ–∫–Ω—ñ –≥—Ä–∏"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ wmctrl
        if check_command_exists('wmctrl'):
            window_names = ['Zenless', 'ZZZ', 'zenless']
            for name in window_names:
                try:
                    subprocess.run(['wmctrl', '-a', name], check=True, 
                                 stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    print(f"‚úì –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ wmctrl: {name}")
                    return True
                except subprocess.CalledProcessError:
                    continue
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ xdotool (–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –Ω–∞ Wayland)
        if check_command_exists('xdotool'):
            window_names = ['Zenless', 'ZZZ', 'zenless']
            for name in window_names:
                try:
                    result = subprocess.run(['xdotool', 'search', '--name', name],
                                          capture_output=True, text=True, check=True)
                    if result.stdout.strip():
                        window_id = result.stdout.strip().split('\n')[0]
                        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)
                        print(f"‚úì –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ xdotool: {name}")
                        return True
                except subprocess.CalledProcessError:
                    continue
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ –≥—Ä–∏: {e}")
    
    return False

def create_reload_signal(mods_path):
    """–°—Ç–≤–æ—Ä—é—î —Å–∏–≥–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è 3DMigoto"""
    try:
        signal_file = Path(mods_path) / '.reload_signal'
        timestamp_file = Path(mods_path) / '.mod_timestamp'
        
        current_time = str(int(time.time() * 1000))
        
        signal_file.write_text(current_time)
        timestamp_file.write_text(current_time)
        
        print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –≤ {mods_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
        return False

def create_reload_ini(mods_path):
    """–°—Ç–≤–æ—Ä—é—î INI —Ñ–∞–π–ª –¥–ª—è 3DMigoto"""
    try:
        ini_path = Path(mods_path) / 'mod_reload_trigger.ini'
        timestamp = int(time.time() * 1000)
        
        ini_content = f"""
; –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—ñ–≤
; –°—Ç–≤–æ—Ä–µ–Ω–æ: {time.strftime('%Y-%m-%d %H:%M:%S')}

[Constants]
$mod_reload_timestamp = {timestamp}
$force_reload = 1

[Present]
post run = CommandListForceReload

[CommandListForceReload]
if $force_reload == 1
    $force_reload = 0
    run = BuiltInCommandListReloadConfig
endif
"""
        
        ini_path.write_text(ini_content.strip())
        print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ INI —Ñ–∞–π–ª: {ini_path}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        import threading
        def cleanup():
            time.sleep(10)
            try:
                if ini_path.exists():
                    ini_path.unlink()
                    print("‚úì –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π INI —Ñ–∞–π–ª")
            except:
                pass
        
        threading.Thread(target=cleanup, daemon=True).start()
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è INI —Ñ–∞–π–ª—É: {e}")
        return False

def get_display_server():
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –¥–∏—Å–ø–ª–µ–π–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    session_type = os.environ.get('XDG_SESSION_TYPE')
    wayland_display = os.environ.get('WAYLAND_DISPLAY')
    display = os.environ.get('DISPLAY')
    
    if session_type == 'wayland' or wayland_display:
        return 'wayland'
    elif display:
        return 'x11'
    else:
        return 'unknown'

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) < 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 f10_reload.py <—à–ª—è—Ö_–¥–æ_–º–æ–¥—ñ–≤>")
        sys.exit(1)
    
    mods_path = sys.argv[1]
    
    if not Path(mods_path).exists():
        print(f"‚ùå –®–ª—è—Ö –¥–æ –º–æ–¥—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î: {mods_path}")
        sys.exit(1)
    
    print("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—ñ–≤...")
    print(f"üìÅ –®–ª—è—Ö –¥–æ –º–æ–¥—ñ–≤: {mods_path}")
    
    display_server = get_display_server()
    print(f"üñ•Ô∏è  –î–∏—Å–ø–ª–µ–π–Ω–∏–π —Å–µ—Ä–≤–µ—Ä: {display_server}")
    
    success = False
    
    # –ú–µ—Ç–æ–¥ 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    if create_reload_signal(mods_path):
        success = True
    
    # –ú–µ—Ç–æ–¥ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è INI —Ñ–∞–π–ª—É
    if create_reload_ini(mods_path):
        success = True
    
    # –ú–µ—Ç–æ–¥ 3: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ F10 —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    if display_server == 'x11':
        if send_f10_xdotool():
            success = True
    elif display_server == 'wayland':
        if send_f10_ydotool():
            success = True
    
    # –ú–µ—Ç–æ–¥ 4: –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ –æ–±–∏–¥–≤–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π)
    if not success:
        print("‚ö†Ô∏è  –ü—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏...")
        if send_f10_xdotool() or send_f10_ydotool():
            success = True
    
    if success:
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
        print("\nüìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å xdotool: sudo apt install xdotool")
        print("2. –ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å ydotool + wmctrl:")
        print("   sudo apt install ydotool wmctrl")
        print("   sudo usermod -a -G input $USER")
        print("   sudo systemctl enable --now ydotool.service")
        print("3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —ñ –≤—ñ–∫–Ω–æ –ù–ï –∑–≥–æ—Ä–Ω—É—Ç–µ")
        print("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ XXMI –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        print("\n‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û –¥–ª—è Wayland:")
        print("   - –í—ñ–∫–Ω–æ –≥—Ä–∏ –º–∞—î –±—É—Ç–∏ –≤–∏–¥–∏–º–∏–º (–Ω–µ –∑–≥–æ—Ä–Ω—É—Ç–∏–º)")
        print("   - ydotool –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≥—Ä—É–ø–∞ input)")
        print("   - –ú–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        sys.exit(1)

if __name__ == '__main__':
    main()