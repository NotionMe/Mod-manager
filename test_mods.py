#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥—ñ–≤
"""

import sys
import os
sys.path.append('/home/notion/Repos/fork')

from src.core.mod_manager import ModManager
from src.utils.config import ConfigManager
from pathlib import Path

def test_mod_scanning():
    """–¢–µ—Å—Ç—É—î —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥—ñ–≤"""
    print("=== –¢–µ—Å—Ç —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥—ñ–≤ ===")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
    config = ConfigManager()
    mods_path = config.get_mods_path()
    save_path = config.get_save_mods_path()
    
    print(f"Mods path: {mods_path}")
    print(f"SaveMods path: {save_path}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –≤ –ø–∞–ø—Ü—ñ Mods
    mods_dir = Path(mods_path)
    if mods_dir.exists():
        print(f"\n–í–º—ñ—Å—Ç –ø–∞–ø–∫–∏ {mods_path}:")
        items = list(mods_dir.iterdir())
        print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(items)}")
        
        for item in items:
            type_str = "DIR" if item.is_dir() else "FILE"
            size = item.stat().st_size if item.is_file() else "N/A"
            print(f"  {type_str:4} | {item.name:30} | {size}")
    else:
        print(f"‚ùå –ü–∞–ø–∫–∞ {mods_path} –Ω–µ —ñ—Å–Ω—É—î!")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ ModManager
    print(f"\n=== –¢–µ—Å—Ç ModManager ===")
    mod_manager = ModManager()
    mod_manager.set_paths(mods_path, save_path)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–ª—è—Ö—ñ–≤
    valid, error = mod_manager.validate_paths()
    print(f"–í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–ª—è—Ö—ñ–≤: {valid}")
    if not valid:
        print(f"–ü–æ–º–∏–ª–∫–∞: {error}")
        return
    
    # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥—ñ–≤
    mods = mod_manager.scan_mods()
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—ñ–≤: {len(mods)}")
    for mod in mods:
        print(f"  üì¶ {mod}")
    
    # –ê–∫—Ç–∏–≤–Ω—ñ –º–æ–¥–∏
    active = mod_manager.get_active_mods()
    print(f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–¥—ñ–≤: {len(active)}")
    for mod in active:
        print(f"  ‚úÖ {mod}")

if __name__ == "__main__":
    test_mod_scanning()